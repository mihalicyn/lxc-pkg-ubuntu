.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "LXC.CONF" "5" "23 November 2009" "" ""

.SH NAME
lxc.conf \- linux container configuration file
.SH "DESCRIPTION"
.PP
The linux containers (\fBlxc\fR) are always created
before being used. This creation defines a set of system
resources to be virtualized / isolated when a process is using
the container. By default, the pids, sysv ipc and mount points
are virtualized and isolated. The other system resources are
shared across containers, until they are explicitly defined in
the configuration file. For example, if there is no network
configuration, the network will be shared between the creator of
the container and the container itself, but if the network is
specified, a new network stack is created for the container and
the container can no longer use the network of its ancestor.
.PP
The configuration file defines the different system resources to
be assigned for the container. At present, the utsname, the
network, the mount points, the root file system and the control
groups are supported.
.PP
Each option in the configuration file has the form \fBkey
= value\fR fitting in one line. The '#' caracter means
the line is a comment.
.SS "HOSTNAME"
.PP
The utsname section defines the hostname to be set for the
container. That means the container can set its own hostname
without changing the one from the system. That makes the
hostname private for the container.
.TP
\fB     lxc.utsname \fR
specify the hostname for the container
.SS "NETWORK"
.PP
The network section defines how the network is virtualized in
the container. The network virtualization acts at the layer
two, so in order to use the network, a few information should
be specified to define the network interfaces to be used by
the container. Several virtual interfaces can be assigned and
used in a container either if the system has only one physical
network interface.
.TP
\fB     lxc.network.type \fR
specify what kind of network virtualization to be used
for the container. Each time
a \fBlxc.network.type\fR field is found a new
round of network configuration begins. By this way
several network virtualization can be specified for the
same container, as well as assigning several network
interfaces for one container. The different
virtualization types can be:

\fBempty:\fR a new network stack is created
for the container, but it will not contain any network
interface.

\fBveth:\fR a new network stack is created, a
peer network device is created with one side assigned to
the container and the other side attached to a bridge
specified by the \fBlxc.network.link\fR\&. The
bridge has to be setup before on the
system, \fBlxc\fR won't handle
configuration outside of the container.

\fBmacvlan:\fR a new network stack is
created, a macvlan interface is linked with the
interface specified by
the \fBlxc.network.link\fR and assigned to
the container.

\fBphys:\fR a new network stack is created
and the interface specified by
the \fBlxc.network.link\fR is assigned to the
container.
.TP
\fB     lxc.network.flags \fR
specify an action to do for the
network.

\fBup:\fR activates the interface.
.TP
\fB     lxc.network.link \fR
specify the interface to be used for real network
traffic.
.TP
\fB     lxc.network.name \fR
the interface name is dynamically allocated, but if an
other name is needed because the configuration files
being used by the container use a generic name,
eg. eth0, this option will rename the interface in the
container.
.TP
\fB     lxc.network.hwaddr \fR
the interface mac address is dynamically allocated by
default to the virtual interface, but in some case, this
is needed to resolve a mac address conflict or to have
always the same link-locak ipv6 address.
.TP
\fB     lxc.network.ipv4 \fR
specify the ipv4 address to assign to the virtualized
interface. Several lines specify several ipv4 addresses.
The address is in format x.y.z.t/m,
eg. 192.168.1.123/24.
.TP
\fB     lxc.network.ipv6 \fR
specify the ipv6 address to assign to the virtualized
interface. Several lines specify several ipv6 addresses.
The address is in format x::y/m,
eg. 2003:db8:1:0:214:1234:fe0b:3596/64
.SS "NEW PSEUDO TTY INSTANCE (DEVPTS)"
.PP
For stricter isolation the container can have its own private
instance of the pseudo tty.
.TP
\fB     lxc.pts \fR
If set, the container will have a new pseudo tty
instance, making this private to it. The value specifies
the maximum number of pseudo ttys allowed for a pts
instance (this limitation is not implemented yet).
.SS "CONSOLE THROUGH THE TTYS"
.PP
If the container is configured with a root filesystem and the
inittab file is setup to launch a getty on the ttys. This
option will specify the number of ttys to be available for the
container. The number of getty in the inittab file of the
container and the number of tty specified in this
configuration file should be equal, otherwise the getty will
die and respawn indefinitly giving annoying messages on the
console.
.TP
\fB     lxc.tty \fR
Specify the number of tty to make available to the
container.
.SS "MOUNT POINTS"
.PP
The mount points section specifies the different places to be
mounted. These mount points will be private to the container
and won't be visible by the processes running outside of the
container. This is useful to mount /etc, /var or /home for
examples.
.TP
\fB     lxc.mount \fR
specify a file location in
the \fIfstab\fR format, containing the
mount informations.
.TP
\fB     lxc.mount.entry \fR
specify a mount point corresponding to a line in the
fstab format.
.SS "ROOT FILE SYSTEM"
.PP
The root file system is the location where the container will
chroot.
.TP
\fB     lxc.rootfs \fR
specify a file location containing the new file tree for
a root file system.
.SS "CONTROL GROUP"
.PP
The control group section contains the configuration for the
different subsystem. \fBlxc\fR does not check the
correctness of the subsystem name. This has the inconvenient
to have the error being detected at runtime, but the advantage
to support any future subsystem.
.TP
\fB     lxc.cgroup.[subsystem name] \fR
specify the control group value to be set. This field is
the identifier to tell the following keyword is the
literal name of the control group subsystem,
eg. \fBlxc.cgroup.cpuset.cpus\fR
.SH "EXAMPLES"
.SS "NETWORK"
.PP
This configuration sets up a container to use a veth pair
device with one side plugged to a bridge br0 (which has been
configured before on the system by the administrator). The
virtual network device visible in the container is renamed to
eth0.
.TP
\fBlxc.utsname = myhostname\fR
.TP
\fBlxc.network.type = veth\fR
.TP
\fBlxc.network.flags = up\fR
.TP
\fBlxc.network.link = br0\fR
.TP
\fBlxc.network.name = eth0\fR
.TP
\fBlxc.network.hwaddr = 4a:49:43:49:79:bf\fR
.TP
\fBlxc.network.ipv4 = 1.2.3.5/24\fR
.TP
\fBlxc.network.ipv6 = 2003:db8:1:0:214:1234:fe0b:3597\fR
.SS "CONTROL GROUP"
.PP
This configuration will setup several control groups for
the application, cpuset.cpus restricts usage of the defined cpu,
cpus.share prioritize the control group, devices.allow makes
usable the specified devices.
.TP
\fBlxc.cgroup.cpuset.cpus = 0,1\fR
.TP
\fBlxc.cgroup.cpu.shares = 1234\fR
.TP
\fBlxc.cgroup.devices.deny = a\fR
.TP
\fBlxc.cgroup.devices.allow = c 1:3 rw\fR
.TP
\fBlxc.cgroup.devices.allow = b 8:0 rw\fR
.SS "COMPLEX CONFIGURATION"
.PP
This example show a complex configuration making a complex
network stack, using the control groups, setting a new hostname,
mounting some locations and a changing the root file
system.
.TP
\fBlxc.utsname = complex\fR
.TP
\fBlxc.network.type = veth\fR
.TP
\fBlxc.network.flags = up\fR
.TP
\fBlxc.network.link = br0\fR
.TP
\fBlxc.network.hwaddr = 4a:49:43:49:79:bf\fR
.TP
\fBlxc.network.ipv4 = 1.2.3.5/24\fR
.TP
\fBlxc.network.ipv6 = 2003:db8:1:0:214:1234:fe0b:3597\fR
.TP
\fBlxc.network.ipv6 = 2003:db8:1:0:214:5432:feab:3588\fR
.TP
\fBlxc.network.type = macvlan\fR
.TP
\fBlxc.network.flags = up\fR
.TP
\fBlxc.network.link = eth0\fR
.TP
\fBlxc.network.hwaddr = 4a:49:43:49:79:bd\fR
.TP
\fBlxc.network.ipv4 = 1.2.3.4/24\fR
.TP
\fBlxc.network.ipv4 = 192.168.10.125/24\fR
.TP
\fBlxc.network.ipv6 = 2003:db8:1:0:214:1234:fe0b:3596\fR
.TP
\fBlxc.network.type = phys\fR
.TP
\fBlxc.network.flags = up\fR
.TP
\fBlxc.network.link = dummy0\fR
.TP
\fBlxc.network.hwaddr = 4a:49:43:49:79:ff\fR
.TP
\fBlxc.network.ipv4 = 1.2.3.6/24\fR
.TP
\fBlxc.network.ipv6 = 2003:db8:1:0:214:1234:fe0b:3297\fR
.TP
\fBlxc.cgroup.cpuset.cpus = 0,1\fR
.TP
\fBlxc.cgroup.cpu.shares = 1234\fR
.TP
\fBlxc.cgroup.devices.deny = a\fR
.TP
\fBlxc.cgroup.devices.allow = c 1:3 rw\fR
.TP
\fBlxc.cgroup.devices.allow = b 8:0 rw\fR
.TP
\fBlxc.mount = /etc/fstab.complex\fR
.TP
\fBlxc.mount.entry = /lib /root/myrootfs/lib none ro,bind 0 0\fR
.TP
\fBlxc.rootfs = /mnt/rootfs.complex\fR
.SH "SEE ALSO"
.PP
\fBchroot\fR(1),
\fBpivot_root\fR(8),
\fB\fIfstab\fB\fR(5)
.SH "SEE ALSO"
.PP
\fBlxc\fR(1),
\fBlxc-create\fR(1),
\fBlxc-destroy\fR(1),
\fBlxc-start\fR(1),
\fBlxc-stop\fR(1),
\fBlxc-execute\fR(1),
\fBlxc-console\fR(1),
\fBlxc-monitor\fR(1),
\fBlxc-wait\fR(1),
\fBlxc-cgroup\fR(1),
\fBlxc-ls\fR(1),
\fBlxc-ps\fR(1),
\fBlxc-info\fR(1),
\fBlxc-freeze\fR(1),
\fBlxc-unfreeze\fR(1),
\fBlxc.conf\fR(5)
.SH "AUTHOR"
.PP
Daniel Lezcano <daniel.lezcano@free.fr>
