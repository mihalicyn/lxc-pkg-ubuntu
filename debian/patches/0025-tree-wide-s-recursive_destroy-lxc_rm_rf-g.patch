From 19ef22b4b368d2046a861124ba0292081d2bed71 Mon Sep 17 00:00:00 2001
From: Christian Brauner <christian.brauner@ubuntu.com>
Date: Sat, 28 Mar 2020 15:03:51 +0100
Subject: tree-wide: s/recursive_destroy/lxc_rm_rf/g

Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
---
 src/lxc/cgroups/cgfsng.c    | 10 +++++-----
 src/lxc/storage/btrfs.c     |  6 +++---
 src/lxc/tools/lxc_ls.c      |  2 +-
 src/lxc/utils.c             |  4 ++--
 src/lxc/utils.h             |  2 +-
 src/tests/mount_injection.c |  2 +-
 6 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/src/lxc/cgroups/cgfsng.c b/src/lxc/cgroups/cgfsng.c
index 11b6fd3c9..5c37c842e 100644
--- a/src/lxc/cgroups/cgfsng.c
+++ b/src/lxc/cgroups/cgfsng.c
@@ -958,7 +958,7 @@ static int cgroup_tree_remove(struct hierarchy **hierarchies,
 		if (!h->container_full_path)
 			continue;
 
-		ret = recursive_destroy(h->container_full_path);
+		ret = lxc_rm_rf(h->container_full_path);
 		if (ret < 0)
 			WARN("Failed to destroy \"%s\"", h->container_full_path);
 
@@ -1085,7 +1085,7 @@ __cgfsng_ops static void cgfsng_monitor_destroy(struct cgroup_ops *ops,
 		/* Monitor might have died before we entered the cgroup. */
 		if (handler->monitor_pid <= 0) {
 			WARN("No valid monitor process found while destroying cgroups");
-			goto try_recursive_destroy;
+			goto try_lxc_rm_rf;
 		}
 
 		if (conf && conf->cgroup_meta.dir)
@@ -1101,7 +1101,7 @@ __cgfsng_ops static void cgfsng_monitor_destroy(struct cgroup_ops *ops,
 		ret = mkdir_p(pivot_path, 0755);
 		if (ret < 0 && errno != EEXIST) {
 			ERROR("Failed to create %s", pivot_path);
-			goto try_recursive_destroy;
+			goto try_lxc_rm_rf;
 		}
 
 		ret = lxc_write_openat(pivot_path, "cgroup.procs", pidstr, len);
@@ -1110,8 +1110,8 @@ __cgfsng_ops static void cgfsng_monitor_destroy(struct cgroup_ops *ops,
 			continue;
 		}
 
-try_recursive_destroy:
-		ret = recursive_destroy(h->monitor_full_path);
+try_lxc_rm_rf:
+		ret = lxc_rm_rf(h->monitor_full_path);
 		if (ret < 0)
 			WARN("Failed to destroy \"%s\"", h->monitor_full_path);
 	}
diff --git a/src/lxc/storage/btrfs.c b/src/lxc/storage/btrfs.c
index 092930519..92a4a6def 100644
--- a/src/lxc/storage/btrfs.c
+++ b/src/lxc/storage/btrfs.c
@@ -730,7 +730,7 @@ static bool do_remove_btrfs_children(struct my_btrfs_tree *tree, u64 root_id,
 	return true;
 }
 
-static int btrfs_recursive_destroy(const char *path)
+static int btrfs_lxc_rm_rf(const char *path)
 {
 	u64 root_id;
 	int fd;
@@ -893,7 +893,7 @@ bool btrfs_try_remove_subvol(const char *path)
 	if (!btrfs_detect(path))
 		return false;
 
-	return btrfs_recursive_destroy(path) == 0;
+	return btrfs_lxc_rm_rf(path) == 0;
 }
 
 int btrfs_destroy(struct lxc_storage *orig)
@@ -902,7 +902,7 @@ int btrfs_destroy(struct lxc_storage *orig)
 
 	src = lxc_storage_get_path(orig->src, "btrfs");
 
-	return btrfs_recursive_destroy(src);
+	return btrfs_lxc_rm_rf(src);
 }
 
 int btrfs_create(struct lxc_storage *bdev, const char *dest, const char *n,
diff --git a/src/lxc/tools/lxc_ls.c b/src/lxc/tools/lxc_ls.c
index 7a0ae6269..4be8564d1 100644
--- a/src/lxc/tools/lxc_ls.c
+++ b/src/lxc/tools/lxc_ls.c
@@ -1071,7 +1071,7 @@ static int ls_remove_lock(const char *path, const char *name,
 	if (check < 0 || (size_t)check >= *len_lockpath)
 		goto out;
 
-	ret = recursive_destroy(*lockpath);
+	ret = lxc_rm_rf(*lockpath);
 	if (ret < 0)
 		WARN("Failed to destroy \"%s\"", *lockpath);
 
diff --git a/src/lxc/utils.c b/src/lxc/utils.c
index c34519084..97507fe64 100644
--- a/src/lxc/utils.c
+++ b/src/lxc/utils.c
@@ -1747,7 +1747,7 @@ int fd_cloexec(int fd, bool cloexec)
 	return 0;
 }
 
-int recursive_destroy(const char *dirname)
+int lxc_rm_rf(const char *dirname)
 {
 	__do_closedir DIR *dir = NULL;
 	int fret = 0;
@@ -1779,7 +1779,7 @@ int recursive_destroy(const char *dirname)
 		if (!S_ISDIR(mystat.st_mode))
 			continue;
 
-		ret = recursive_destroy(pathname);
+		ret = lxc_rm_rf(pathname);
 		if (ret < 0)
 			fret = -1;
 	}
diff --git a/src/lxc/utils.h b/src/lxc/utils.h
index 1d980f885..4ab41bf1f 100644
--- a/src/lxc/utils.h
+++ b/src/lxc/utils.h
@@ -235,7 +235,7 @@ extern uint64_t lxc_find_next_power2(uint64_t n);
 /* Set a signal the child process will receive after the parent has died. */
 extern int lxc_set_death_signal(int signal, pid_t parent, int parent_status_fd);
 extern int fd_cloexec(int fd, bool cloexec);
-extern int recursive_destroy(const char *dirname);
+extern int lxc_rm_rf(const char *dirname);
 extern int lxc_setup_keyring(char *keyring_label);
 extern bool lxc_can_use_pidfd(int pidfd);
 
diff --git a/src/tests/mount_injection.c b/src/tests/mount_injection.c
index 3ea15f433..3c44d4014 100644
--- a/src/tests/mount_injection.c
+++ b/src/tests/mount_injection.c
@@ -415,7 +415,7 @@ static bool lxc_setup_shmount(const char *shmount_path)
 static void lxc_teardown_shmount(char *shmount_path)
 {
 	(void)umount2(shmount_path, MNT_DETACH);
-	(void)recursive_destroy(shmount_path);
+	(void)lxc_rm_rf(shmount_path);
 }
 
 int main(int argc, char *argv[])
