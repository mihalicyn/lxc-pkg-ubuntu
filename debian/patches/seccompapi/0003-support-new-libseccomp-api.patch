From 769872f9f2c994d8bfd6de906562df64bcd92600 Mon Sep 17 00:00:00 2001
From: Serge Hallyn <serge.hallyn@ubuntu.com>
Date: Tue, 11 Dec 2012 11:40:02 -0600
Subject: [PATCH 3/3] support new libseccomp api

Detect the new api by existence in seccomp.h of the scmp_filter_ctx
type in configure.ac.

Signed-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>
---
 configure.ac         |    3 +++
 src/lxc/conf.c       |    5 +++--
 src/lxc/conf.h       |    7 +++++++
 src/lxc/lxcseccomp.h |    8 ++++++++
 src/lxc/seccomp.c    |   46 ++++++++++++++++++++++++++++++++++++++++------
 5 files changed, 61 insertions(+), 8 deletions(-)

Index: lxc/configure.ac
===================================================================
--- lxc.orig/configure.ac	2012-12-11 12:41:03.000000000 -0600
+++ lxc/configure.ac	2012-12-11 12:45:07.447878759 -0600
@@ -27,6 +27,9 @@
 	[AC_HELP_STRING([--enable-seccomp], [enable seccomp])],
 	[], [enable_seccomp=check])
 
+# HAVE_SCMP_FILTER_CTX=1 will tell us we have libseccomp api >= 1.0.0
+AC_CHECK_TYPES([scmp_filter_ctx], [], [], [#include <seccomp.h>])
+
 AC_ARG_ENABLE([doc],
 	[AC_HELP_STRING([--enable-doc], [make mans (require docbook2man installed) [default=auto]])],
 	[], [enable_doc=auto])
Index: lxc/src/lxc/conf.c
===================================================================
--- lxc.orig/src/lxc/conf.c	2012-12-11 12:42:25.000000000 -0600
+++ lxc/src/lxc/conf.c	2012-12-11 12:45:43.279878154 -0600
@@ -62,6 +62,8 @@
 #include "lxc.h"	/* for lxc_cgroup_set() */
 #include "caps.h"       /* for lxc_caps_last_cap() */
 
+#include "lxcseccomp.h"
+
 lxc_log_define(lxc_conf, lxc);
 
 #define MAXHWLEN    18
@@ -2661,8 +2663,7 @@
 	lxc_clear_config_network(conf);
 	if (conf->aa_profile)
 		free(conf->aa_profile);
-	if (conf->seccomp)
-		free(conf->seccomp);
+	lxc_seccomp_free(conf);
 	lxc_clear_config_caps(conf);
 	lxc_clear_cgroups(conf, "lxc.cgroup");
 	lxc_clear_hooks(conf, "lxc.hook");
Index: lxc/src/lxc/conf.h
===================================================================
--- lxc.orig/src/lxc/conf.h	2012-12-11 12:41:03.000000000 -0600
+++ lxc/src/lxc/conf.h	2012-12-11 12:43:11.019880732 -0600
@@ -31,6 +31,10 @@
 
 #include <lxc/start.h> /* for lxc_handler */
 
+#if HAVE_SCMP_FILTER_CTX
+typedef void * scmp_filter_ctx;
+#endif
+
 enum {
 	LXC_NET_EMPTY,
 	LXC_NET_VETH,
@@ -226,6 +230,9 @@
 	int umount_proc;
 	struct lxc_list hooks[NUM_LXC_HOOKS];
 	char *seccomp;  // filename with the seccomp rules
+#if HAVE_SCMP_FILTER_CTX
+	scmp_filter_ctx *seccomp_ctx;
+#endif
 	int maincmd_fd;
 	int autodev;  // if 1, mount and fill a /dev at start
 };
Index: lxc/src/lxc/lxcseccomp.h
===================================================================
--- lxc.orig/src/lxc/lxcseccomp.h	2012-12-11 12:41:03.000000000 -0600
+++ lxc/src/lxc/lxcseccomp.h	2012-12-11 12:43:11.019880732 -0600
@@ -28,6 +28,7 @@
 #ifdef HAVE_SECCOMP
 int lxc_seccomp_load(struct lxc_conf *conf);
 int lxc_read_seccomp_config(struct lxc_conf *conf);
+void lxc_seccomp_free(struct lxc_conf *conf);
 #else
 static inline int lxc_seccomp_load(struct lxc_conf *conf) {
 	return 0;
@@ -36,6 +37,13 @@
 static inline int lxc_read_seccomp_config(struct lxc_conf *conf) {
 	return 0;
 }
+
+static inline void lxc_seccomp_free(struct lxc_conf *conf) {
+	if (conf->seccomp) {
+		free(conf->seccomp);
+		conf->seccomp = NULL;
+	}
+}
 #endif
 
 #endif
Index: lxc/src/lxc/seccomp.c
===================================================================
--- lxc.orig/src/lxc/seccomp.c	2012-12-11 12:41:03.000000000 -0600
+++ lxc/src/lxc/seccomp.c	2012-12-11 12:43:11.019880732 -0600
@@ -27,6 +27,7 @@
 #include <seccomp.h>
 #include <errno.h>
 #include <seccomp.h>
+#include "config.h"
 #include "lxcseccomp.h"
 
 #include "log.h"
@@ -69,7 +70,11 @@
 		ret = sscanf(line, "%d", &nr);
 		if (ret != 1)
 			return -1;
-		ret = seccomp_rule_add(SCMP_ACT_ALLOW, nr, 0);
+		ret = seccomp_rule_add(
+#if HAVE_SCMP_FILTER_CTX
+			conf->seccomp_ctx,
+#endif
+			SCMP_ACT_ALLOW, nr, 0);
 		if (ret < 0) {
 			ERROR("failed loading allow rule for %d\n", nr);
 			return ret;
@@ -83,16 +88,28 @@
 	FILE *f;
 	int ret;
 
-	if (seccomp_init(SCMP_ACT_ERRNO(31)) < 0)  { /* for debug, pass in SCMP_ACT_TRAP */
+	if (!conf->seccomp)
+		return 0;
+
+#if HAVE_SCMP_FILTER_CTX
+	/* XXX for debug, pass in SCMP_ACT_TRAP */
+	conf->seccomp_ctx = seccomp_init(SCMP_ACT_ERRNO(31));
+	ret = !conf->seccomp_ctx;
+#else
+	ret = seccomp_init(SCMP_ACT_ERRNO(31)) < 0;
+#endif
+	if (ret) {
 		ERROR("failed initializing seccomp");
 		return -1;
 	}
-	if (!conf->seccomp)
-		return 0;
 
 	/* turn of no-new-privs.  We don't want it in lxc, and it breaks
 	 * with apparmor */
-	if (seccomp_attr_set(SCMP_FLTATR_CTL_NNP, 0)) {
+	if (seccomp_attr_set(
+#if HAVE_SCMP_FILTER_CTX
+			conf->seccomp_ctx,
+#endif
+			SCMP_FLTATR_CTL_NNP, 0)) {
 		ERROR("failed to turn off n-new-privs\n");
 		return -1;
 	}
@@ -112,10 +129,27 @@
 	int ret;
 	if (!conf->seccomp)
 		return 0;
-	ret = seccomp_load();
+	ret = seccomp_load(
+#if HAVE_SCMP_FILTER_CTX
+			conf->seccomp_ctx
+#endif
+	);
 	if (ret < 0) {
 		ERROR("Error loading the seccomp policy");
 		return -1;
 	}
 	return 0;
 }
+
+void lxc_seccomp_free(struct lxc_conf *conf) {
+	if (conf->seccomp) {
+		free(conf->seccomp);
+		conf->seccomp = NULL;
+	}
+#if HAVE_SCMP_FILTER_CTX
+	if (conf->seccomp_ctx) {
+		seccomp_release(conf->seccomp_ctx);
+		conf->seccomp_ctx = NULL;
+	}
+#endif
+}
