From f4d02217ee2baf7275175d2c6610de4908a9addf Mon Sep 17 00:00:00 2001
From: Petr Malat <oss@malat.biz>
Date: Wed, 15 Jun 2022 13:16:43 +0200
Subject: [PATCH 02/45] tools: Provide multicall lxc binary

Create a binary, which embeds all lxc tools similar way as busybox
embeds its applets. This is handy for embedded systems as it saves
roughly 90% of the disk space.

To disable normal tools and use multicall binary exclusively use the
following meson setup options:
  -Dtools=false -Dtools-multicall=true

Signed-off-by: Petr Malat <oss@malat.biz>
---
 meson.build                    |   3 +-
 meson_options.txt              |   3 +
 src/lxc/tools/lxc_attach.c     |   3 +-
 src/lxc/tools/lxc_autostart.c  |   3 +-
 src/lxc/tools/lxc_cgroup.c     |   3 +-
 src/lxc/tools/lxc_checkpoint.c |   3 +-
 src/lxc/tools/lxc_config.c     |   3 +-
 src/lxc/tools/lxc_console.c    |   3 +-
 src/lxc/tools/lxc_copy.c       |   3 +-
 src/lxc/tools/lxc_create.c     |   3 +-
 src/lxc/tools/lxc_destroy.c    |   3 +-
 src/lxc/tools/lxc_device.c     |   3 +-
 src/lxc/tools/lxc_execute.c    |   3 +-
 src/lxc/tools/lxc_freeze.c     |   3 +-
 src/lxc/tools/lxc_info.c       |   3 +-
 src/lxc/tools/lxc_ls.c         |   3 +-
 src/lxc/tools/lxc_monitor.c    |   3 +-
 src/lxc/tools/lxc_multicall.c  | 108 +++++++++++++++++++++++++++++++++
 src/lxc/tools/lxc_snapshot.c   |   3 +-
 src/lxc/tools/lxc_start.c      |   3 +-
 src/lxc/tools/lxc_stop.c       |   3 +-
 src/lxc/tools/lxc_top.c        |   3 +-
 src/lxc/tools/lxc_unfreeze.c   |   3 +-
 src/lxc/tools/lxc_unshare.c    |   3 +-
 src/lxc/tools/lxc_wait.c       |   3 +-
 src/lxc/tools/meson.build      |  23 +++++++
 26 files changed, 180 insertions(+), 23 deletions(-)
 create mode 100644 src/lxc/tools/lxc_multicall.c

Index: lxc-5.0.1/meson.build
===================================================================
--- lxc-5.0.1.orig/meson.build
+++ lxc-5.0.1/meson.build
@@ -141,6 +141,7 @@ want_pam_cgroup = get_option('pam-cgroup
 want_mans = get_option('man')
 want_tests = get_option('tests')
 want_tools = get_option('tools')
+want_tools_multicall = get_option('tools-multicall')
 want_commands = get_option('commands')
 want_capabilities = get_option('capabilities')
 want_apparmor = get_option('apparmor')
@@ -872,7 +873,7 @@ subdir('hooks')
 if want_commands
     subdir('src/lxc/cmd')
 endif
-if want_tools
+if want_tools or want_tools_multicall
     subdir('src/lxc/tools')
 endif
 subdir('src/lxc/tools/include')
Index: lxc-5.0.1/meson_options.txt
===================================================================
--- lxc-5.0.1.orig/meson_options.txt
+++ lxc-5.0.1/meson_options.txt
@@ -37,6 +37,9 @@ option('pam-cgroup', type: 'boolean', va
 option('tools', type: 'boolean', value: 'true',
        description: 'build and install tools')
 
+option('tools-multicall', type: 'boolean', value: 'false',
+       description: 'build and install busybox style multicall binary')
+
 # was --{disable,enable}-commands in autotools
 option('commands', type: 'boolean', value: 'true',
        description: 'build and install commands')
Index: lxc-5.0.1/src/lxc/tools/lxc_attach.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_attach.c
+++ lxc-5.0.1/src/lxc/tools/lxc_attach.c
@@ -271,7 +271,8 @@ static int lxc_attach_create_log_file(co
 	return fd;
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_attach_main"))) main(int argc, char *argv[]);
+int lxc_attach_main(int argc, char *argv[])
 {
 	int ret = -1;
 	int wexit = 0;
Index: lxc-5.0.1/src/lxc/tools/lxc_autostart.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_autostart.c
+++ lxc-5.0.1/src/lxc/tools/lxc_autostart.c
@@ -304,7 +304,8 @@ static int toss_list(struct lxc_list *c_
 	return 1;
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_autostart_main"))) main(int argc, char *argv[]);
+int lxc_autostart_main(int argc, char *argv[])
 {
 	int count = 0, failed = 0, i = 0, ret = 0;
 	struct lxc_list *cmd_group;
Index: lxc-5.0.1/src/lxc/tools/lxc_cgroup.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_cgroup.c
+++ lxc-5.0.1/src/lxc/tools/lxc_cgroup.c
@@ -50,7 +50,8 @@ static int my_checker(const struct lxc_a
 	return 0;
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_cgroup_main"))) main(int argc, char *argv[]);
+int lxc_cgroup_main(int argc, char *argv[])
 {
 	char *state_object = NULL, *value = NULL;
 	struct lxc_container *c;
Index: lxc-5.0.1/src/lxc/tools/lxc_checkpoint.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_checkpoint.c
+++ lxc-5.0.1/src/lxc/tools/lxc_checkpoint.c
@@ -246,7 +246,8 @@ static bool restore(struct lxc_container
 	}
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_checkpoint_main"))) main(int argc, char *argv[]);
+int lxc_checkpoint_main(int argc, char *argv[])
 {
 	struct lxc_container *c;
 	struct lxc_log log;
Index: lxc-5.0.1/src/lxc/tools/lxc_config.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_config.c
+++ lxc-5.0.1/src/lxc/tools/lxc_config.c
@@ -40,7 +40,8 @@ static void list_config_items(void)
 	exit(EXIT_SUCCESS);
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_config_main"))) main(int argc, char *argv[]);
+int lxc_config_main(int argc, char *argv[])
 {
 	struct lxc_config_items *i;
 	const char *value;
Index: lxc-5.0.1/src/lxc/tools/lxc_console.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_console.c
+++ lxc-5.0.1/src/lxc/tools/lxc_console.c
@@ -77,7 +77,8 @@ static char etoc(const char *expr)
 	return 1 + ((c > 'Z') ? (c - 'a') : (c - 'Z'));
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_console_main"))) main(int argc, char *argv[]);
+int lxc_console_main(int argc, char *argv[])
 {
 	int ret;
 	struct lxc_container *c;
Index: lxc-5.0.1/src/lxc/tools/lxc_copy.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_copy.c
+++ lxc-5.0.1/src/lxc/tools/lxc_copy.c
@@ -142,7 +142,8 @@ static int parse_mntsubopts(char *subopt
 static int parse_bind_mnt(char *mntstring, enum mnttype type);
 static int parse_ovl_mnt(char *mntstring, enum mnttype type);
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_copy_main"))) main(int argc, char *argv[]);
+int lxc_copy_main(int argc, char *argv[])
 {
 	struct lxc_container *c;
 	struct lxc_log log;
Index: lxc-5.0.1/src/lxc/tools/lxc_create.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_create.c
+++ lxc-5.0.1/src/lxc/tools/lxc_create.c
@@ -190,7 +190,8 @@ static bool validate_bdev_args(struct lx
 	return true;
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_create_main"))) main(int argc, char *argv[]);
+int lxc_create_main(int argc, char *argv[])
 {
 	struct lxc_container *c;
 	struct bdev_specs spec;
Index: lxc-5.0.1/src/lxc/tools/lxc_destroy.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_destroy.c
+++ lxc-5.0.1/src/lxc/tools/lxc_destroy.c
@@ -188,7 +188,8 @@ static bool do_destroy_with_snapshots(st
 	return bret;
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_destroy_main"))) main(int argc, char *argv[]);
+int lxc_destroy_main(int argc, char *argv[])
 {
 	struct lxc_container *c;
 	struct lxc_log log;
Index: lxc-5.0.1/src/lxc/tools/lxc_device.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_device.c
+++ lxc-5.0.1/src/lxc/tools/lxc_device.c
@@ -78,7 +78,8 @@ static bool is_interface(const char *dev
 	return false;
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_device_main"))) main(int argc, char *argv[]);
+int lxc_device_main(int argc, char *argv[])
 {
 	struct lxc_container *c;
 	struct lxc_log log;
Index: lxc-5.0.1/src/lxc/tools/lxc_execute.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_execute.c
+++ lxc-5.0.1/src/lxc/tools/lxc_execute.c
@@ -128,7 +128,8 @@ static bool set_argv(struct lxc_containe
 	return true;
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_execute_main"))) main(int argc, char *argv[]);
+int lxc_execute_main(int argc, char *argv[])
 {
 	struct lxc_container *c;
 	struct lxc_log log;
Index: lxc-5.0.1/src/lxc/tools/lxc_freeze.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_freeze.c
+++ lxc-5.0.1/src/lxc/tools/lxc_freeze.c
@@ -36,7 +36,8 @@ Options :\n\
 	.log_file     = "none",
 };
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_freeze_main"))) main(int argc, char *argv[]);
+int lxc_freeze_main(int argc, char *argv[])
 {
 	struct lxc_container *c;
 	struct lxc_log log;
Index: lxc-5.0.1/src/lxc/tools/lxc_info.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_info.c
+++ lxc-5.0.1/src/lxc/tools/lxc_info.c
@@ -388,7 +388,8 @@ static int print_info(const char *name,
 	return 0;
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_info_main"))) main(int argc, char *argv[]);
+int lxc_info_main(int argc, char *argv[])
 {
 	int ret = EXIT_FAILURE;
 	struct lxc_log log;
Index: lxc-5.0.1/src/lxc/tools/lxc_ls.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_ls.c
+++ lxc-5.0.1/src/lxc/tools/lxc_ls.c
@@ -188,7 +188,8 @@ Options :\n\
 	.ls_nesting = 0,
 };
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_ls_main"))) main(int argc, char *argv[]);
+int lxc_ls_main(int argc, char *argv[])
 {
 	int ret = EXIT_FAILURE;
 	struct lxc_log log;
Index: lxc-5.0.1/src/lxc/tools/lxc_monitor.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_monitor.c
+++ lxc-5.0.1/src/lxc/tools/lxc_monitor.c
@@ -216,7 +216,8 @@ static int lxc_tool_monitord_spawn(const
 	_exit(EXIT_FAILURE);
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_monitor_main"))) main(int argc, char *argv[]);
+int lxc_monitor_main(int argc, char *argv[])
 {
 	char *regexp;
 	struct lxc_msg msg;
Index: lxc-5.0.1/src/lxc/tools/lxc_multicall.c
===================================================================
--- /dev/null
+++ lxc-5.0.1/src/lxc/tools/lxc_multicall.c
@@ -0,0 +1,108 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+
+#include <string.h>
+#include <stdio.h>
+
+#define PREFIX "lxc-"
+
+int lxc_attach_main(int argc, char *argv[]);
+int lxc_autostart_main(int argc, char *argv[]);
+int lxc_cgroup_main(int argc, char *argv[]);
+int lxc_checkpoint_main(int argc, char *argv[]);
+int lxc_config_main(int argc, char *argv[]);
+int lxc_console_main(int argc, char *argv[]);
+int lxc_copy_main(int argc, char *argv[]);
+int lxc_create_main(int argc, char *argv[]);
+int lxc_destroy_main(int argc, char *argv[]);
+int lxc_device_main(int argc, char *argv[]);
+int lxc_execute_main(int argc, char *argv[]);
+int lxc_freeze_main(int argc, char *argv[]);
+int lxc_info_main(int argc, char *argv[]);
+int lxc_ls_main(int argc, char *argv[]);
+int lxc_monitor_main(int argc, char *argv[]);
+int lxc_snapshot_main(int argc, char *argv[]);
+int lxc_start_main(int argc, char *argv[]);
+int lxc_stop_main(int argc, char *argv[]);
+int lxc_top_main(int argc, char *argv[]);
+int lxc_unfreeze_main(int argc, char *argv[]);
+int lxc_unshare_main(int argc, char *argv[]);
+int lxc_wait_main(int argc, char *argv[]);
+
+static const struct {
+	const char *cmd;
+	int (*main)(int argc, char *argv[]);
+} applets[] = {
+	{ "attach", lxc_attach_main },
+	{ "autostart", lxc_autostart_main },
+	{ "cgroup", lxc_cgroup_main },
+	{ "checkpoint", lxc_checkpoint_main },
+	{ "config", lxc_config_main },
+	{ "console", lxc_console_main },
+	{ "copy", lxc_copy_main },
+	{ "create", lxc_create_main },
+	{ "destroy", lxc_destroy_main },
+	{ "device", lxc_device_main },
+	{ "execute", lxc_execute_main },
+	{ "freeze", lxc_freeze_main },
+	{ "info", lxc_info_main },
+	{ "ls", lxc_ls_main },
+	{ "monitor", lxc_monitor_main },
+	{ "snapshot", lxc_snapshot_main },
+	{ "start", lxc_start_main },
+	{ "stop", lxc_stop_main },
+	{ "top", lxc_top_main },
+	{ "unfreeze", lxc_unfreeze_main },
+	{ "unshare", lxc_unshare_main },
+	{ "wait", lxc_wait_main }
+};
+
+const int applets_nmemb = (int)(sizeof(applets)/sizeof(applets[0]));
+
+int main(int argc, char *argv[])
+{
+	const char *cmd;
+	int i;
+
+	if (argc < 1)
+		goto err0;
+
+	cmd = strrchr(argv[0], '/');
+	cmd = cmd ? cmd + 1 : argv[0];
+
+
+	if (!strcmp(cmd, "lxc")) {
+		if (argc < 2)
+			goto err0;
+		cmd = argv[1];
+		argc -= 1;
+		argv += 1;
+		if (!strcmp(cmd, "-h") || !strcmp(cmd, "--help"))
+			goto err0;
+	} else if (!strncmp(cmd, PREFIX, strlen(PREFIX))) {
+		cmd += strlen(PREFIX);
+	} else {
+		goto err0;
+	}
+
+	for (i = 0; i < applets_nmemb; i++) {
+		if (!strcmp(applets[i].cmd, cmd))
+			return applets[i].main(argc, argv);
+	}
+
+	fprintf(stderr, "Unsupported command '%s'\n", cmd);
+	goto err1;
+
+err0:	fprintf(stderr, "This is a multi-call binary, argv[0] is expected to be\n"
+			"  a name of the requested command prefixed with '%s'\n"
+			"or\n"
+			"  'lxc' and the command should be the 1st argument.\n\n"
+			"For example calling this program as '%sls' or 'lxc' "
+			"with the argument 'ls' lists containers.\n\n",
+			PREFIX, PREFIX);
+err1:	fprintf(stderr, "Known commands:\n");
+	for (i = 0; i < applets_nmemb; i++) {
+		fprintf(stderr, "%s ", applets[i].cmd);
+	}
+	putc('\n', stderr);
+	return 1;
+}
Index: lxc-5.0.1/src/lxc/tools/lxc_snapshot.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_snapshot.c
+++ lxc-5.0.1/src/lxc/tools/lxc_snapshot.c
@@ -61,7 +61,8 @@ static int do_snapshot_restore(struct lx
 static int do_snapshot_task(struct lxc_container *c, enum task task);
 static void print_file(char *path);
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_snapshot_main"))) main(int argc, char *argv[]);
+int lxc_snapshot_main(int argc, char *argv[])
 {
 	struct lxc_container *c;
 	struct lxc_log log;
Index: lxc-5.0.1/src/lxc/tools/lxc_start.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_start.c
+++ lxc-5.0.1/src/lxc/tools/lxc_start.c
@@ -149,7 +149,8 @@ static int ensure_path(char **confpath,
 	return 0;
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_start_main"))) main(int argc, char *argv[]);
+int lxc_start_main(int argc, char *argv[])
 {
 	const char *lxcpath;
 	char *const *args;
Index: lxc-5.0.1/src/lxc/tools/lxc_stop.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_stop.c
+++ lxc-5.0.1/src/lxc/tools/lxc_stop.c
@@ -81,7 +81,8 @@ static int my_parser(struct lxc_argument
 	return 0;
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_stop_main"))) main(int argc, char *argv[]);
+int lxc_stop_main(int argc, char *argv[])
 {
 	struct lxc_container *c;
 	struct lxc_log log;
Index: lxc-5.0.1/src/lxc/tools/lxc_top.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_top.c
+++ lxc-5.0.1/src/lxc/tools/lxc_top.c
@@ -564,7 +564,8 @@ static int stdin_handler(int fd, uint32_
 	return LXC_MAINLOOP_CLOSE;
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_top_main"))) main(int argc, char *argv[]);
+int lxc_top_main(int argc, char *argv[])
 {
 	struct lxc_async_descr descr;
 	int ret, ct_print_cnt;
Index: lxc-5.0.1/src/lxc/tools/lxc_unfreeze.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_unfreeze.c
+++ lxc-5.0.1/src/lxc/tools/lxc_unfreeze.c
@@ -36,7 +36,8 @@ Options :\n\
 	.log_file     = "none",
 };
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_unfreeze_main"))) main(int argc, char *argv[]);
+int lxc_unfreeze_main(int argc, char *argv[])
 {
 	struct lxc_container *c;
 	struct lxc_log log;
Index: lxc-5.0.1/src/lxc/tools/lxc_unshare.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_unshare.c
+++ lxc-5.0.1/src/lxc/tools/lxc_unshare.c
@@ -280,7 +280,8 @@ static void free_ifname_list(void)
 	}
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_unshare_main"))) main(int argc, char *argv[]);
+int lxc_unshare_main(int argc, char *argv[])
 {
 	int ret;
 	pid_t pid;
Index: lxc-5.0.1/src/lxc/tools/lxc_wait.c
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/lxc_wait.c
+++ lxc-5.0.1/src/lxc/tools/lxc_wait.c
@@ -72,7 +72,8 @@ static int my_checker(const struct lxc_a
 	return 0;
 }
 
-int main(int argc, char *argv[])
+int __attribute__((weak, alias("lxc_wait_main"))) main(int argc, char *argv[]);
+int lxc_wait_main(int argc, char *argv[])
 {
 	struct lxc_container *c;
 	struct lxc_log log;
Index: lxc-5.0.1/src/lxc/tools/meson.build
===================================================================
--- lxc-5.0.1.orig/src/lxc/tools/meson.build
+++ lxc-5.0.1/src/lxc/tools/meson.build
@@ -17,3 +17,26 @@ if want_tools
             install: true)
     endforeach
 endif
+
+if want_tools_multicall
+    tools_all_sources = files('lxc_multicall.c') + tools_common_sources
+    foreach cmd : tools_commands
+        tools_all_sources += files('lxc_' + cmd + '.c')
+    endforeach
+
+    public_programs += executable(
+        'lxc',
+        tools_all_sources,
+        include_directories: liblxc_includes,
+        dependencies: liblxc_dep,
+        install: true)
+
+    if want_tools == false
+        foreach cmd : tools_commands
+            public_programs += install_symlink(
+                'lxc-' + cmd,
+                pointing_to: 'lxc',
+                install_dir: get_option('bindir'))
+        endforeach
+    endif
+endif
